user www-data;
worker_processes auto;
pid /run/nginx.pid;

load_module modules/ngx_http_headers_more_filter_module.so;

error_log /var/log/nginx/error.log;

events {
    worker_connections 1024;
    use epoll;
    # multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main
      '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $bytes_sent '
      '"$http_referer" "$http_user_agent" '
      '"$gzip_ratio"';

    # close connections that have been idle for this amount of time
    # - initial connection waiting for complete header
    client_header_timeout 10m;
    # - waiting for client body
    client_body_timeout   10m;
    # - waiting for client to accept data
    send_timeout          10m;
    # - timeout for keep-alive connections
    #   75s, announce 20s to clients
    keepalive_timeout 75 20;

    # size limits that will probably only
    # work for static content and small applications.
    # Reverse proxy and fastcgi webapp vhosts
    # should set their own limits.
    #client_header_buffer_size    1k;
    #large_client_header_buffers  4 8k;
    #client_body_buffer_size      16k;
    #client_max_body_size         1m;

    #output_buffers 2 32k;
    #postpone_output 1460;

    # use sendfile() instead of read() + write()
    sendfile on;
    ## # use TCP_CORK (this usually results in less packets being transmitted)
    ## tcp_nopush on;
    ## # use TCP_NODELAY where appropriate
    ## tcp_nodelay on;

    # sites should set their own document root
    root /var/www/empty;

    index index.html;

    ignore_invalid_headers on;

    # Do not expose the nginx version in response header
    server_tokens      off;

    # Drop the 'Server' header in replies
    more_clear_headers Server;

    gzip off;
    gzip_min_length 1k;
    #gzip_buffers 16 8k;
    gzip_types text/plain;

    include /etc/nginx/sites-enabled/*;
}
